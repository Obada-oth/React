{"version":3,"sources":["Search/Search.js","CityWeather.js","WeatherCard.js","App.js","reportWebVitals.js","index.js"],"names":["Search","city","setCity","fetchWeatherData","className","type","value","onChange","e","target","placeholder","onClick","CityWeather","cityWeather","name","weather","main","description","temp_min","temp_max","coord","lon","lat","WeatherCard","useState","setCityWeather","isLoading","setIsLoading","hasError","setHasError","a","url","process","fetch","res","json","data","cod","error","Error","message","Object","keys","length","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gRA2BeA,G,MA1BA,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,iBAC/B,OACE,sBAAKC,UAAU,mBAAf,UACE,qBAAKA,UAAU,eAAf,SACE,uBACEC,KAAK,OACLC,MAAOL,EACPM,SAAU,SAACC,GACTN,EAAQM,EAAEC,OAAOH,QAEnBI,YAAY,kBAGhB,qBAAKN,UAAU,gBAAf,SACE,wBACEC,KAAK,SACLM,QAAS,WACPR,EAAiBF,IAHrB,2BCQOW,EAvBK,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACrB,OACE,qBAAKT,UAAU,OAAf,SACE,gCACE,qBAAKA,UAAU,UAAf,SACE,6BAAKS,EAAYC,SAEnB,sBAAKV,UAAU,UAAf,UACE,6BAAKS,EAAYE,QAAQ,GAAGC,OAC5B,4BAAIH,EAAYE,QAAQ,GAAGE,iBAE7B,sBAAKb,UAAU,mBAAf,UACE,4CAAeS,EAAYG,KAAKE,YAChC,4CAAeL,EAAYG,KAAKG,YAChC,4CACcN,EAAYO,MAAMC,IADhC,KACuCR,EAAYO,MAAME,gBCuCpDC,EAlDK,WAAO,IAAD,EACAC,mBAAS,IADT,mBACjBvB,EADiB,KACXC,EADW,OAEcsB,mBAAS,IAFvB,mBAEjBX,EAFiB,KAEJY,EAFI,OAGUD,oBAAS,GAHnB,mBAGjBE,EAHiB,KAGNC,EAHM,OAIQH,mBAAS,MAJjB,mBAIjBI,EAJiB,KAIPC,EAJO,KAMlB1B,EAAgB,uCAAG,WAAOF,GAAP,qBAAA6B,EAAA,6DACjBC,EADiB,4DAC0C9B,EAD1C,+BACqE+B,oCADrE,SAGrBL,GAAa,GAHQ,SAIHM,MAAMF,GAJH,cAIfG,EAJe,gBAKFA,EAAIC,OALF,UAMJ,OADXC,EALe,QAMZC,IANY,uBAObC,EAAQ,IAAIC,OACZH,KAAOA,EACbT,GAAa,GACPW,EAVa,QAYnBb,EAAeW,GACfT,GAAa,GAbM,0DAgBrBE,EAAY,KAAMO,MAClBT,GAAa,GAjBQ,0DAAH,sDAqBtB,OACE,gCACE,mDAEA,cAAC,EAAD,CACE1B,KAAMA,EACNC,QAASA,EACTC,iBAAkBA,IAGnByB,GACC,8BACGA,EAASY,QADZ,IACqB,uBADrB,uCAIDd,GAAa,2CACbe,OAAOC,KAAK7B,GAAa8B,OAAS,GACjC,cAAC,EAAD,CAAa9B,YAAaA,QCrCnB+B,MARf,WACE,OACE,qBAAKxC,UAAU,MAAf,SACE,cAAC,EAAD,OCMSyC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b068a82b.chunk.js","sourcesContent":["import \"./Search.css\";\nconst Search = ({ city, setCity, fetchWeatherData }) => {\n  return (\n    <div className=\"search-container\">\n      <div className=\"search-field\">\n        <input\n          type=\"text\"\n          value={city}\n          onChange={(e) => {\n            setCity(e.target.value);\n          }}\n          placeholder=\"Search City\"\n        />\n      </div>\n      <div className=\"search-button\">\n        <button\n          type=\"submit\"\n          onClick={() => {\n            fetchWeatherData(city);\n          }}\n        >\n          Search\n        </button>\n      </div>\n    </div>\n  );\n};\nexport default Search;\n","const CityWeather = ({ cityWeather }) => {\n  return (\n    <div className=\"card\">\n      <div>\n        <div className=\"section\">\n          <h2>{cityWeather.name}</h2>\n        </div>\n        <div className=\"section\">\n          <h3>{cityWeather.weather[0].main}</h3>\n          <p>{cityWeather.weather[0].description}</p>\n        </div>\n        <div className=\"section temp_loc\">\n          <p>Min_temp : {cityWeather.main.temp_min}</p>\n          <p>Max_temp : {cityWeather.main.temp_max}</p>\n          <p>\n            Location : {cityWeather.coord.lon}, {cityWeather.coord.lat}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CityWeather;\n","import { useState } from \"react\";\nimport Search from \"./Search/Search\";\nimport CityWeather from \"./CityWeather\";\n\nconst WeatherCard = () => {\n  const [city, setCity] = useState(\"\");\n  const [cityWeather, setCityWeather] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasError, setHasError] = useState(null);\n\n  const fetchWeatherData = async (city) => {\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${process.env.REACT_APP_OPENWEATHERMAP_API_KEY}`;\n    try {\n      setIsLoading(true);\n      const res = await fetch(url);\n      const data = await res.json();\n      if (data.cod !== 200) {\n        const error = new Error();\n        error.data = data;\n        setIsLoading(false);\n        throw error;\n      } else {\n        setCityWeather(data);\n        setIsLoading(false);\n      }\n    } catch (error) {\n      setHasError(error.data);\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div>\n      <h1>Hack Your Weather</h1>\n\n      <Search\n        city={city}\n        setCity={setCity}\n        fetchWeatherData={fetchWeatherData}\n      />\n\n      {hasError && (\n        <p>\n          {hasError.message} <br /> Please type in a valid city name\n        </p>\n      )}\n      {isLoading && <p>Loading...</p>}\n      {Object.keys(cityWeather).length > 0 && (\n        <CityWeather cityWeather={cityWeather} />\n      )}\n    </div>\n  );\n};\n\nexport default WeatherCard;\n","import \"./App.css\";\nimport WeatherCard from \"./WeatherCard\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <WeatherCard />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}